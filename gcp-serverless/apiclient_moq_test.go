// Code generated by moq; DO NOT EDIT.
// github.com/matryer/moq

package serverless

import (
	"sync"
)

// Ensure, that ApiClientMock does implement ApiClient.
// If this is not the case, regenerate this file with moq.
var _ ApiClient = &ApiClientMock{}

// ApiClientMock is a mock implementation of ApiClient.
//
//	func TestSomethingThatUsesApiClient(t *testing.T) {
//
//		// make and configure a mocked ApiClient
//		mockedApiClient := &ApiClientMock{
//			StoreMetadataFunc: func(key1 string, key2 string) error {
//				panic("mock out the StoreMetadata method")
//			},
//		}
//
//		// use mockedApiClient in code that requires ApiClient
//		// and then make assertions.
//
//	}
type ApiClientMock struct {
	// StoreMetadataFunc mocks the StoreMetadata method.
	StoreMetadataFunc func(key1 string, key2 string) error

	// calls tracks calls to the methods.
	calls struct {
		// StoreMetadata holds details about calls to the StoreMetadata method.
		StoreMetadata []struct {
			// Key1 is the key1 argument value.
			Key1 string
			// Key2 is the key2 argument value.
			Key2 string
		}
	}
	lockStoreMetadata sync.RWMutex
}

// StoreMetadata calls StoreMetadataFunc.
func (mock *ApiClientMock) StoreMetadata(key1 string, key2 string) error {
	if mock.StoreMetadataFunc == nil {
		panic("ApiClientMock.StoreMetadataFunc: method is nil but ApiClient.StoreMetadata was just called")
	}
	callInfo := struct {
		Key1 string
		Key2 string
	}{
		Key1: key1,
		Key2: key2,
	}
	mock.lockStoreMetadata.Lock()
	mock.calls.StoreMetadata = append(mock.calls.StoreMetadata, callInfo)
	mock.lockStoreMetadata.Unlock()
	return mock.StoreMetadataFunc(key1, key2)
}

// StoreMetadataCalls gets all the calls that were made to StoreMetadata.
// Check the length with:
//
//	len(mockedApiClient.StoreMetadataCalls())
func (mock *ApiClientMock) StoreMetadataCalls() []struct {
	Key1 string
	Key2 string
} {
	var calls []struct {
		Key1 string
		Key2 string
	}
	mock.lockStoreMetadata.RLock()
	calls = mock.calls.StoreMetadata
	mock.lockStoreMetadata.RUnlock()
	return calls
}
